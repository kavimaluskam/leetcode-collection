{"componentChunkName":"component---src-templates-question-js","path":"/question/274_h-index.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher&#39;s h-index.</p>\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">definition of h-index on Wikipedia</a>: &quot;A scientist has index <i>h</i> if <i>h</i> of his/her <i>N</i> papers have <b>at least</b> <i>h</i> citations each, and the other <i>N &minus; h</i> papers have <b>no more than</b> <i>h</i> citations each.&quot;</p>\n<p><b>Example:</b></p>\n<pre>\n<b>Input:</b> <code>citations = [3,0,6,1,5]</code>\n<b>Output:</b> 3 \n<strong>Explanation: </strong><code>[3,0,6,1,5] </code>means the researcher has <code>5</code> papers in total and each of them had \n             received <code>3, 0, 6, 1, 5</code> citations respectively. \n&nbsp;            Since the researcher has <code>3</code> papers with <b>at least</b> <code>3</code> citations each and the remaining \n&nbsp;            two with <b>no more than</b> <code>3</code> citations each, her h-index is <code>3</code>.</pre>\n<p><strong>Note:&nbsp;</strong>If there are several possible values for <em>h</em>, the maximum one is taken as the h-index.</p>\n<h2>Discussion</h2>\n<p>The question requires us to find <code>h</code> smaller than <code>n</code> such that, there is\n<strong>at least</strong> <code>h</code> values in the list larger than <code>h</code>.</p>\n<p>As suggested from leetcode hints, one easy solution would be sorting the input\nlist. Then search from the larger integer side and stop when the value is\nsmaller then the index, we get <code>h</code>.</p>\n<p>Instead of sorting algorithm which gives time complexity of <code>O(n log(n))</code>, we\ncan make use of the fact <code>h</code> is smaller than <code>n</code>. We create a hash list with size\n<code>n</code>, then save a count collection with value later than <code>n</code> ceiled at <code>n</code>.\nThen searching in the hash list would be give the result.</p>\n<h3>Trial 1</h3>\n<p><em>Trial 1</em> gives a straight forward solution based on\nsorting. Then we can iterate from the larger integer side. Check for the\nvalue the begins to be smaller than the iterate index and imply return it.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hIndex</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> citations<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        citations <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>citations<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>citations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> citations<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">return</span> i</code></pre></div>\n<h3>Solution</h3>\n<p><em>The final solution</em> gives a faster solution without sorting,\nand of course with larger space. First we setup a list of size <code>n</code> for saving\nthe counts. Then we iterate through the input list and add the counts to the\nlist. For values larger than <code>n</code> we just add the counts to <code>n</code> instead.</p>\n<p>Then, we can iterate through the cache list from the larger size, and summing\nthe counts. We break the iteration as long as the result is larger than the\nindex and result the result, stating the total counts.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hIndex</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> citations<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        size <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>citations<span class=\"token punctuation\">)</span>\n        cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> citation <span class=\"token keyword\">in</span> citations<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> citation <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span> citation <span class=\"token operator\">></span> size<span class=\"token punctuation\">:</span>\n                citation <span class=\"token operator\">=</span> size\n\n            cache<span class=\"token punctuation\">[</span>citation <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">+=</span> cache<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> result <span class=\"token operator\">>=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, as only two iteration is involved.</li>\n<li>Space Complexity: <code>O(n)</code>, as we only maintain the collection list of size <code>n</code>.</li>\n</ul>","frontmatter":{"id":274,"title":"H-Index","url":"https://leetcode.com/problems/h-index/description/","tags":["hash-table","sort"],"difficulty":"Medium","acceptance":"36.3%"}}},"pageContext":{"id":274}},"staticQueryHashes":["3111183354"]}