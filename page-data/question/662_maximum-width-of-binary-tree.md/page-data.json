{"componentChunkName":"component---src-templates-question-js","path":"/question/662_maximum-width-of-binary-tree.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.</p>\n<p>The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the <code>null</code> nodes between the end-nodes are also counted into the length calculation.</p>\n<p>It is <strong>guaranteed</strong> that the answer will in the range of 32-bit signed integer.</p>\n<p><b>Example 1:</b></p>\n<pre>\n<b>Input:</b> \n\n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \n\n<b>Output:</b> 4\n<b>Explanation:</b> The maximum width existing in the third level with the length 4 (5,3,null,9).\n</pre>\n<p><b>Example 2:</b></p>\n<pre>\n<b>Input:</b> \n\n          1\n         /  \n        3    \n       / \\       \n      5   3     \n\n<b>Output:</b> 2\n<b>Explanation:</b> The maximum width existing in the third level with the length 2 (5,3).\n</pre>\n<p><b>Example 3:</b></p>\n<pre>\n<b>Input:</b> \n\n          1\n         / \\\n        3   2 \n       /        \n      5      \n\n<b>Output:</b> 2\n<b>Explanation:</b> The maximum width existing in the second level with the length 2 (3,2).\n</pre>\n<p><b>Example 4:</b></p>\n<pre>\n<b>Input:</b> \n\n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\n<b>Output:</b> 8\n<b>Explanation:</b>The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li>The&nbsp;given binary tree will have between&nbsp;<code>1</code>&nbsp;and&nbsp;<code>3000</code>&nbsp;nodes.</li>\n</ul>\n<h2>Discussion</h2>\n<p>The first challenge of this problem is:</p>\n<blockquote>\n<p>How to evaluate the <code>leftness</code> / <code>rightness</code> of the nodes, and thus\nfind the <code>distance</code> between nodes?</p>\n</blockquote>\n<p>Imagine given a tree:</p>\n<div class=\"gatsby-highlight\" data-language=\"tree\"><pre class=\"language-tree\"><code class=\"language-tree\">            1\n          /   \\\n         3     2\n        / \\     \\\n       5   3     9</code></pre></div>\n<p>The problem would be easier to solve if we interpret the tree as:</p>\n<div class=\"gatsby-highlight\" data-language=\"tree\"><pre class=\"language-tree\"><code class=\"language-tree\">            0\n          /   \\\n         0     1\n        / \\     \\\n       0   1     3</code></pre></div>\n<p>wheres each node carries a value specifying its order in the level, thus we\nhave:</p>\n<ul>\n<li><code>node.left.value = node.value * 2</code></li>\n<li><code>node.right.value = node.value * 2 + 1</code></li>\n<li><code>width(depth) = leftest_node(depth).value - rightest_node(depth).value + 1</code></li>\n</ul>\n<p>And as we are doing level-based operation, we would aim for solving the above\nproblems with a BFS algorithm.</p>\n<h3>Solution</h3>\n<p>We try to use BFS to construct the tree value and compare the width on\neach tree level. To save memory space, we try to record the maximum / minimum\nvalue on each node searching; and evaluate the width and reset the\nmaximum / minimum value before each level iteration.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">widthOfBinaryTree</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        r <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        t_max <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        t_min <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">while</span> q<span class=\"token punctuation\">:</span>\n            s <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>\n            r <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> t_max <span class=\"token operator\">-</span> t_min <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            t_max <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            t_min <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">while</span> s <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                n<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                s <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">if</span> n<span class=\"token punctuation\">:</span>\n                    t_max <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> t_max<span class=\"token punctuation\">)</span>\n                    t_min <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> t_min<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> t_min <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">else</span> v\n                    q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> r</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, as we use BFS to scan all nodes in the tree.</li>\n<li>Space Complexity: <code>O(n)</code>, as we have to return the traversal of all nodes\nin the tree. And we use BFS to handle level-wise operations,\nand numbers of elements cached at each row is bounded by <code>n</code>.</li>\n</ul>","frontmatter":{"id":662,"title":"Maximum Width of Binary Tree","url":"https://leetcode.com/problems/maximum-width-of-binary-tree/description/","tags":["tree"],"difficulty":"Medium","acceptance":"40.4%"}}},"pageContext":{"id":662}},"staticQueryHashes":["3111183354"]}