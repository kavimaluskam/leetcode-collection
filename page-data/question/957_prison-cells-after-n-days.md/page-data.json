{"componentChunkName":"component---src-templates-question-js","path":"/question/957_prison-cells-after-n-days.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>There are 8 prison cells in a row, and each cell is either occupied or vacant.</p>\n<p>Each day, whether the cell is occupied or vacant changes according to the following rules:</p>\n<ul>\n\t<li>If a cell has two adjacent neighbors that are both occupied or both vacant,&nbsp;then the cell becomes occupied.</li>\n\t<li>Otherwise, it becomes vacant.</li>\n</ul>\n<p>(Note that because the prison is a row, the first and the last cells in the row can&#39;t have two adjacent neighbors.)</p>\n<p>We describe the current state of the prison&nbsp;in the following way:&nbsp;<code>cells[i] == 1</code> if the <code>i</code>-th cell is occupied, else <code>cells[i] == 0</code>.</p>\n<p>Given the initial state of the prison, return the state of the prison after <code>N</code> days (and <code>N</code> such changes described above.)</p>\n<p>&nbsp;</p>\n<div>\n<ol>\n</ol>\n</div>\n<div>\n<p><strong>Example 1:</strong></p>\n<pre>\n<strong>Input: </strong>cells = <span id=\"example-input-1-1\">[0,1,0,1,1,0,0,1]</span>, N = <span id=\"example-input-1-2\">7</span>\n<strong>Output: </strong><span id=\"example-output-1\">[0,0,1,1,0,0,0,0]</span>\n<strong>Explanation: \n</strong><span id=\"example-output-1\">The following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]</span>\n\n</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input: </strong>cells = <span id=\"example-input-2-1\">[1,0,0,1,0,0,1,0]</span>, N = <span id=\"example-input-2-2\">1000000000</span>\n<strong>Output: </strong><span id=\"example-output-2\">[0,0,1,1,1,1,1,0]</span>\n</pre>\n<p>&nbsp;</p>\n<p><strong>Note:</strong></p>\n<ol>\n\t<li><code>cells.length == 8</code></li>\n\t<li><code>cells[i]</code> is in <code>{0, 1}</code></li>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n</div>\n</div>\n<h2>Discussion</h2>\n<p>The problems requires us to update a list based on the current values (state)\nand a given logic rule, and evaluate the result after <code>N</code> iterations.</p>\n<p>Let's start with the naive approach. Consider give integer <code>N</code>, we perform the\nlist update logic for <code>N</code> time, we will have the result in <code>O(n) time</code>. Simple.</p>\n<p>To escape from the <code>O(n)</code>, our only hope is any looping pattern in this problem.\nDetecting this, we cache the result into a list / map, and check if the latest\nlist exist in cache.</p>\n<h3>Solution</h3>\n<p>Our solution iterates towards <code>N</code>, performing update to the list in each\niteration. And to search for repeat patterns, we cache the historical records\nfor the rows in Hash Map, and search for the updated rows to see if duplication\ncan be found.</p>\n<p>Once we found a looping pattern, we can return the result from cache give days\n= <code>(N - current day) % period + pattern start day</code>.</p>\n<p>Well but if there's no looping pattern, we are doomed with <code>O(n)</code> being the best\ntime complexity.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">prisonAfterNDays</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cells<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">','</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> cells<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> i\n        <span class=\"token punctuation\">}</span>\n        pre <span class=\"token operator\">=</span> cells\n\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">:</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            new <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> pre<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pre<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    new<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token string\">','</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> new<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">:</span>\n                j <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> new<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                period <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> j\n                <span class=\"token keyword\">for</span> snap<span class=\"token punctuation\">,</span> day <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> day <span class=\"token operator\">==</span> j <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>N <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> period<span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> snap<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n            cache<span class=\"token punctuation\">[</span><span class=\"token string\">','</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> new<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n            pre <span class=\"token operator\">=</span> new\n\n        <span class=\"token keyword\">return</span> new</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(k)</code> if pattern with period <code>k</code> exists. Else <code>O(n)</code>.</li>\n<li>Space Complexity: <code>O(k)</code> if pattern with period <code>k</code> exists. Else <code>O(n)</code>.</li>\n</ul>","frontmatter":{"id":957,"title":"Prison Cells After N Days","url":"https://leetcode.com/problems/prison-cells-after-n-days/description/","tags":["hash-table"],"difficulty":"Medium","acceptance":"40.4%"}}},"pageContext":{"id":957}},"staticQueryHashes":["72776548"]}