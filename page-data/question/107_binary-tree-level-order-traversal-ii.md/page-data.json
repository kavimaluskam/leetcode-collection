{"componentChunkName":"component---src-templates-question-js","path":"/question/107_binary-tree-level-order-traversal-ii.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given a binary tree, return the <i>bottom-up level order</i> traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).</p>\n<p>\nFor example:<br />\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br />\n<pre>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n</p>\n<p>\nreturn its bottom-up level order traversal as:<br />\n<pre>\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n</pre>\n</p>\n<h2>Discussion</h2>\n<p>For tree problems require operations on each level, we use BFS.\nBare in mind the result require reverse of node's value. Hence we always\ninsert the level scanning to the beginning of result.</p>\n<h3>Solution</h3>\n<p>A simple BFS basically solves the problem. And we add each level's result to the\nbeginning of final result instead of reordering it,\nfor a better time performance.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">levelOrderBottom</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span>\n        r <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">while</span> q<span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>\n            t <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                node <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                t<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">:</span>\n                    q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span>\n                    q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n            r<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> r</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, as we use BFS to scan all nodes in the tree.</li>\n<li>Space Complexity: <code>O(n)</code>, as we have to return the traversal of all nodes\nin the tree. And we use BFS to handle level-wise operations,\nand numbers of elements cached at each row is bounded by <code>n</code>.</li>\n</ul>","frontmatter":{"id":107,"title":"Binary Tree Level Order Traversal II","url":"https://leetcode.com/problems/binary-tree-level-order-traversal-ii/description/","tags":["tree","breadth-first-search"],"difficulty":"Easy","acceptance":"54.1%"}}},"pageContext":{"id":107}},"staticQueryHashes":["3111183354"]}