{"componentChunkName":"component---src-templates-question-js","path":"/question/187_repeated-dna-sequences.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>All DNA is composed of a series of nucleotides abbreviated as <code>&#39;A&#39;</code>, <code>&#39;C&#39;</code>, <code>&#39;G&#39;</code>, and <code>&#39;T&#39;</code>, for example: <code>&quot;ACGAATTCCG&quot;</code>. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.</p>\n<p>Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n<strong>Output:</strong> [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"AAAAAAAAAAAAA\"\n<strong>Output:</strong> [\"AAAAAAAAAA\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is <code>&#39;A&#39;</code>, <code>&#39;C&#39;</code>, <code>&#39;G&#39;</code>, or <code>&#39;T&#39;</code>.</li>\n</ul>\n<h2>Discussion</h2>\n<p>This problem requires finding substring with <strong>fixed-length-of-10</strong> and\n<strong>occur-more-than-once</strong> in a given input string.</p>\n<p>Instead of scanning by brutal force which takes <code>O(n^2)</code>, we can make use the\nidea of sliding window algorithm. Then it's easy to find all\n<strong>substrings-of-size-10</strong> and count their frequency.</p>\n<h3>Solution</h3>\n<p>Our solution consists of two steps, counter-construction and frequency-counting.</p>\n<p>First we make use of the idea of <em>sliding-window-algorithm</em> to scan all\nsubstring of size-10 in one linear iteration, with two pointers moving together\nwith fixed distance of 10. The substrings are cached in a <code>counter (or hashmap)</code>\nfor frequency counting.</p>\n<p>Then we simply return all substrings of frequency more than once.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findRepeatedDnaSequences</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        cache <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span> i<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, given a linear iteration with two pointers.</li>\n<li>Space Complexity: <code>O(n)</code>, as a substring counter is saved in memory.</li>\n</ul>","frontmatter":{"id":187,"title":"Repeated DNA Sequences","url":"https://leetcode.com/problems/repeated-dna-sequences/description/","tags":["hash-table","bit-manipulation"],"difficulty":"Medium","acceptance":"40.5%"}}},"pageContext":{"id":187}},"staticQueryHashes":["3111183354"]}