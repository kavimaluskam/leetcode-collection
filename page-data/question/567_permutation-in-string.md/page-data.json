{"componentChunkName":"component---src-templates-question-js","path":"/question/567_permutation-in-string.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given two strings <b>s1</b> and <b>s2</b>, write a function to return true if <b>s2</b> contains the permutation of <b>s1</b>. In other words, one of the first string&#39;s permutations is the <b>substring</b> of the second string.</p>\n<p>&nbsp;</p>\n<p><b>Example 1:</b></p>\n<pre>\n<b>Input: </b>s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;\n<b>Output: </b>True\n<b>Explanation:</b> s2 contains one permutation of s1 (&quot;ba&quot;).\n</pre>\n<p><b>Example 2:</b></p>\n<pre>\n<b>Input:</b>s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;\n<b>Output:</b> False\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li>The input strings only contain lower case letters.</li>\n\t<li>The length of both given strings is in range [1, 10,000].</li>\n</ul>\n<h2>Discussion</h2>\n<p>Given two string with only alphabet letter, this problem requires us\nto check if <em>any</em> permutation of a shorter string is a substring\nof a longer string.</p>\n<p>We immediately come up with the solution of using hash map for a shorter string,\nand iterate along the longer string for the checking.</p>\n<p>In order to compare for the hash map, we have to compute a temporary hash map\nwith similar size to do checking. Here we comes sliding window for the key to\nthe solution.</p>\n<h3>Solution</h3>\n<p>Our solution starts with computing a hash map for the shorter string <code>s1</code>.\nTo compute the hash map in the longer string <code>s2</code>, we have to make sure\nthe size of both hash map are the same. And then when iterating along <code>s2</code>,\nwe can drop the first element and add the new element at the tail to maintain\nthe same size, i.e.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">t = i: a, [b, c, d, e,] f, g, h, ....\nt = i + 1: a, b, [c, d, e, f,] g, h, ....</code></pre></div>\n<p>In order to maintain the same size of two hash maps, we can simply construct\nthem in the same iteration. Then we only iterate <code>s2</code> for <code>len(s2) - len(s1)</code>\ntimes.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">checkInclusion</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        h1<span class=\"token punctuation\">,</span> h2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            c1<span class=\"token punctuation\">,</span> c2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> c1 <span class=\"token keyword\">in</span> h1<span class=\"token punctuation\">:</span>\n                h1<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                h1<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">if</span> c2 <span class=\"token keyword\">in</span> h2<span class=\"token punctuation\">:</span>\n                h2<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                h2<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n        size <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> h1 <span class=\"token operator\">==</span> h2<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            head<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> size<span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> h2<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                h2<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">del</span> h2<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> tail <span class=\"token keyword\">in</span> h2<span class=\"token punctuation\">:</span>\n                h2<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                h2<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">if</span> h1 <span class=\"token operator\">==</span> h2<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, as in total only one iteration along <code>s2</code> is done,\nand the hash map comparison checking is only of <code>O(26) = O(1)</code>.</li>\n<li>Space Complexity: <code>O(1)</code>, as only constant space is used, and the hash map\nis of size <code>O(26) = O(1)</code>.</li>\n</ul>","frontmatter":{"id":567,"title":"Permutation in String","url":"https://leetcode.com/problems/permutation-in-string/description/","tags":["two-pointers","sliding-window"],"difficulty":"Medium","acceptance":"44.4%"}}},"pageContext":{"id":567}},"staticQueryHashes":["3111183354"]}