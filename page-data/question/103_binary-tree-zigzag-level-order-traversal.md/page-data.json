{"componentChunkName":"component---src-templates-question-js","path":"/question/103_binary-tree-zigzag-level-order-traversal.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given a binary tree, return the <i>zigzag level order</i> traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).</p>\n<p>\nFor example:<br />\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br />\n<pre>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n</p>\n<p>\nreturn its zigzag level order traversal as:<br />\n<pre>\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n</pre>\n</p>\n<h2>Discussion</h2>\n<p>A problem very similar to <a href=\"./107_binary-tree-level-order-traversal-ii.md\">107. Binary Tree Level Order Traversal II</a>.\nWhile handling is needed for the zigzag level order.</p>\n<p>For tree problems require operations on each level, we use BFS.</p>\n<h3>Solution</h3>\n<p>A simple BFS basically solves the problem. And determine the level of the\ncurrent iteration in the input tree by checking the length of the final result\nwe are updating.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\n<span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">zigzagLevelOrder</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> result\n\n        queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>val <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> queue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>val <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> queue<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> queue<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">:</span>\n                    temp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span>\n                    temp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n            queue <span class=\"token operator\">=</span> temp\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, as we use BFS to scan all nodes in the tree.</li>\n<li>Space Complexity: <code>O(n)</code>, as we use BFS to handle level-wise operations,\nand numbers of elements cached at each row is bounded by <code>n</code>.</li>\n</ul>","frontmatter":{"id":103,"title":"Binary Tree Zigzag Level Order Traversal","url":"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/","tags":["stack","tree","breadth-first-search"],"difficulty":"Medium","acceptance":"48.9%"}}},"pageContext":{"id":103}},"staticQueryHashes":["3111183354"]}