{"componentChunkName":"component---src-templates-question-js","path":"/question/1095_find-in-mountain-array.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p><em>(This problem is an&nbsp;<strong>interactive problem</strong>.)</em></p>\n<p>You may recall that an array&nbsp;<code>A</code> is a <em>mountain array</em> if and only if:</p>\n<ul>\n\t<li><code>A.length &gt;= 3</code></li>\n\t<li>There exists some&nbsp;<code>i</code>&nbsp;with&nbsp;<code>0 &lt; i&nbsp;&lt; A.length - 1</code>&nbsp;such that:\n\t<ul>\n\t\t<li><code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i]</code></li>\n\t\t<li><code>A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n<p>Given a mountain&nbsp;array <code>mountainArr</code>, return the <strong>minimum</strong>&nbsp;<code>index</code> such that <code>mountainArr.get(index) == target</code>.&nbsp; If such an <code>index</code>&nbsp;doesn&#39;t exist, return <code>-1</code>.</p>\n<p><strong>You can&#39;t access the mountain array directly.</strong>&nbsp; You may only access the array using a&nbsp;<code>MountainArray</code>&nbsp;interface:</p>\n<ul>\n\t<li><code>MountainArray.get(k)</code> returns the element of the array at index <code>k</code>&nbsp;(0-indexed).</li>\n\t<li><code>MountainArray.length()</code>&nbsp;returns the length of the array.</li>\n</ul>\n<p>Submissions making more than <code>100</code> calls to&nbsp;<code>MountainArray.get</code>&nbsp;will be judged <em>Wrong Answer</em>.&nbsp; Also, any solutions that attempt to circumvent the judge&nbsp;will result in disqualification.</p>\n<ol>\n</ol>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre>\n<strong>Input:</strong> array = [1,2,3,4,5,3,1], target = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> array = [0,1,2,4,2,1], target = 3\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 3 does not exist in <code>the array,</code> so we return -1.\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>3 &lt;= mountain_arr.length() &lt;= 10000</code></li>\n\t<li><code>0 &lt;= target &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= mountain_arr.get(index) &lt;=&nbsp;10^9</code></li>\n</ul>\n<h2>Discussion</h2>\n<p>A complex version of <a href=\"./852_peak-index-in-a-mountain-array\">852. Peak Index in a Mountain Array</a>.\nWe have to locate the target value from a given mountain array.</p>\n<p>In order to perform binary search, we first find the peak index in the input.\nThen we simply perform binary search on the <em>rising-side</em> then <em>falling-side</em>\nof the input.</p>\n<h3>Solution</h3>\n<p>We first find the peak index with a separate function\n<code>findPeakIndexInMountainArray</code>, which is exactly the implementation of\n<a href=\"./852_peak-index-in-a-mountain-array.md\">852. Peak Index in a Mountain Array</a>.</p>\n<p>Then we perform binary search on the <em>rising-side</em> of the array, then the\n<em>falling-side</em>. Note that in each binary search, we have to check if the ending\nelement is target, as it's missed in the binary search scanning process.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># \"\"\"</span>\n<span class=\"token comment\"># This is MountainArray's API interface.</span>\n<span class=\"token comment\"># You should not implement it, or speculate about its implementation</span>\n<span class=\"token comment\"># \"\"\"</span>\n<span class=\"token comment\">#class MountainArray:</span>\n<span class=\"token comment\">#    def get(self, index: int) -> int:</span>\n<span class=\"token comment\">#    def length(self) -> int:</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findInMountainArray</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> mountain_arr<span class=\"token punctuation\">:</span> <span class=\"token string\">'MountainArray'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># location peak</span>\n        peak <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>findPeakIndexInMountainArray<span class=\"token punctuation\">(</span>mountain_arr<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># searching in the rising side</span>\n        head<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> peak\n\n        <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> mountain_arr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> mid\n            <span class=\"token keyword\">elif</span> mountain_arr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span>\n                head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tail <span class=\"token operator\">=</span> mid\n        <span class=\"token keyword\">if</span> mountain_arr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> tail\n\n        <span class=\"token comment\"># searching in the falling side</span>\n        head<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">=</span> peak<span class=\"token punctuation\">,</span> mountain_arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> mountain_arr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> mid\n            <span class=\"token keyword\">elif</span> mountain_arr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span>\n                head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tail <span class=\"token operator\">=</span> mid\n        <span class=\"token keyword\">if</span> mountain_arr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> tail\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findPeakIndexInMountainArray</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mountain_arr<span class=\"token punctuation\">:</span> <span class=\"token string\">'MountainArray'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        head<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mountain_arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> mountain_arr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> mountain_arr<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tail <span class=\"token operator\">=</span> mid\n        <span class=\"token keyword\">return</span> head</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(log(n))</code>, as we perform standard binary search three times.</li>\n<li>Space Complexity: <code>O(1)</code>, as we only perform binary search and saving\nconstant values.</li>\n</ul>","frontmatter":{"id":1095,"title":"Find in Mountain Array","url":"https://leetcode.com/problems/find-in-mountain-array/description/","tags":["binary-search"],"difficulty":"Hard","acceptance":"36.0%"}}},"pageContext":{"id":1095}},"staticQueryHashes":["3111183354"]}