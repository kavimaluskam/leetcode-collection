{"componentChunkName":"component---src-templates-question-js","path":"/question/203_remove-linked-list-elements.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Remove all elements from a linked list of integers that have value <b><i>val</i></b>.</p>\n<p><b>Example:</b></p>\n<pre>\n<b>Input:</b>  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><b>val</b></em> = 6\n<b>Output:</b> 1-&gt;2-&gt;3-&gt;4-&gt;5\n</pre>\n<h2>Discussion</h2>\n<p>This problem requires an algorithm scanning through the linked-list, removing\ndesired node and reconstruct the links.</p>\n<p>An intuitive approach would be scanning the value of the next node.\nIf the next node is to-be-removed, we can reconstruct the link to the\nnext-next node.</p>\n<p>Yet a problem is that we can't filter out the node at the beginning if they\nare carrying the desired value.</p>\n<p>There are different approach to do. Instead of <a href=\"https://leetcode.com/explore/challenge/card/july-leetcoding-challenge/546/week-3-july-15th-july-21st/3396/discuss/746590/O(n)-time-O(1)-space-solution-wvideo-whiteboard-explanation\">creating a pesudo-node at the\nbeginning</a>,\ni cache the previously scanned node, and check current node's value.</p>\n<h3>Solution</h3>\n<p>The solution begins with a loop iterate through all the elements,\nand we keep update the <code>cache</code> to prepare to the link-reconstruction.</p>\n<p>Once the desired value is scanned, we skip the <code>cache</code> update to skip it\nfrom reconstruction.</p>\n<p>Besides we managed a variable <code>cache_head</code>, in order to return the Linked-List\nfrom the beginning.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> head\n        cache <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        cache_head <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> val<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> cache<span class=\"token punctuation\">:</span>\n                    cache_head <span class=\"token operator\">=</span> node\n                    cache <span class=\"token operator\">=</span> node\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node\n                    cache <span class=\"token operator\">=</span> node\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n        <span class=\"token keyword\">if</span> cache<span class=\"token punctuation\">:</span>\n            cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node\n\n        <span class=\"token keyword\">return</span> cache_head</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, as only one scanning of the list is required.</li>\n<li>Space Complexity: <code>O(1)</code>, as only two nodes are cached in memory.</li>\n</ul>","frontmatter":{"id":203,"title":"Remove Linked List Elements","url":"https://leetcode.com/problems/remove-linked-list-elements/description/","tags":["linked-list"],"difficulty":"Easy","acceptance":"38.9%"}}},"pageContext":{"id":203}},"staticQueryHashes":["72776548"]}