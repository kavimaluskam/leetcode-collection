{"componentChunkName":"component---src-templates-question-js","path":"/question/986_interval-list-intersections.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>You are given two lists of closed intervals, <code>firstList</code> and <code>secondList</code>, where <code>firstList[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> and <code>secondList[j] = [start<sub>j</sub>, end<sub>j</sub>]</code>. Each list of intervals is pairwise <strong>disjoint</strong> and in <strong>sorted order</strong>.</p>\n<p>Return <em>the intersection of these two interval lists</em>.</p>\n<p>A <strong>closed interval</strong> <code>[a, b]</code> (with <code>a &lt; b</code>) denotes the set of real numbers <code>x</code> with <code>a &lt;= x &lt;= b</code>.</p>\n<p>The <strong>intersection</strong> of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of <code>[1, 3]</code> and <code>[2, 4]</code> is <code>[2, 3]</code>.</p>\n<p>&#xA0;</p>\n<p><strong>Example 1:</strong></p>\n<img alt src=\"https://assets.leetcode.com/uploads/2019/01/30/interval1.png\" style=\"width: 700px; height: 194px;\">\n<pre><strong>Input:</strong> firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\n<strong>Output:</strong> [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> firstList = [[1,3],[5,9]], secondList = []\n<strong>Output:</strong> []\n</pre>\n<p><strong>Example 3:</strong></p>\n<pre>\n<strong>Input:</strong> firstList = [], secondList = [[4,8],[10,12]]\n<strong>Output:</strong> []\n</pre>\n<p><strong>Example 4:</strong></p>\n<pre>\n<strong>Input:</strong> firstList = [[1,7]], secondList = [[3,10]]\n<strong>Output:</strong> [[3,7]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>0 &lt;= firstList.length, secondList.length &lt;= 1000</code></li>\n\t<li><code>firstList.length + secondList.length &gt;= 1</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>end<sub>i</sub> &lt; start<sub>i+1</sub></code></li>\n\t<li><code>0 &lt;= start<sub>j</sub> &lt; end<sub>j</sub> &lt;= 10<sup>9</sup> </code></li>\n\t<li><code>end<sub>j</sub> &lt; start<sub>j+1</sub></code></li>\n</ul>\n<h2>Discussion</h2>\n<p>This problem requires us to find intersection between two list of intervals.</p>\n<p>Given that each list of intervals is <strong>pairwise disjoint</strong> and <strong>sorted</strong>,\nwe do not have to handle the complicated case within each list.</p>\n<p>We imagine this problem can be solved with a two-pointer approach.\nWe set up two individual pointers on each list and moving along the list.\nIn each iteration we only compare one interval from each list.</p>\n<p>We keep updating the pointer in the list with a smaller interval and eventually\nevery pairs of interval with chance of intersecting will be evaluated.</p>\n<p>Now the problem looks to have a linear solution, all left to be done is the\npair evaluation. Below we can list out 6 scenarios for possible interval.</p>\n<table>\n<thead>\n<tr>\n<th>Interval A</th>\n<th>Interval B</th>\n<th>Intersection</th>\n<th>Interval to be Updated</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[1, 2]</td>\n<td>[2, 3]</td>\n<td>[2, 2]</td>\n<td>A</td>\n</tr>\n<tr>\n<td>[3, 4]</td>\n<td>[2, 3]</td>\n<td>[3, 3]</td>\n<td>B</td>\n</tr>\n<tr>\n<td>[3, 4]</td>\n<td>[5, 6]</td>\n<td>[]</td>\n<td>A</td>\n</tr>\n<tr>\n<td>[7, 8]</td>\n<td>[5, 6]</td>\n<td>[]</td>\n<td>B</td>\n</tr>\n<tr>\n<td>[3, 4]</td>\n<td>[2, 5]</td>\n<td>[3, 4]</td>\n<td>A</td>\n</tr>\n<tr>\n<td>[1, 6]</td>\n<td>[4, 5]</td>\n<td>[4, 5]</td>\n<td>B</td>\n</tr>\n</tbody>\n</table>\n<p>Based on the listed out scenarios, we can observe two action to be taken\nin the evaluation step:</p>\n<ol>\n<li>Intersection of two interval is <code>[max(low_a, low_b), min(high_a, high_b)]</code>,\nif exists.</li>\n<li>The interval lower upper limit is to be updated.</li>\n</ol>\n<p>Based on this we can implement our solution.</p>\n<h3>Solution</h3>\n<p>The code implementation is simple.</p>\n<p>After some empty case checking we initialize two pointers,\nand the evaluation is done in a single while loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">intervalIntersection</span><span class=\"token punctuation\">(</span>\n        self<span class=\"token punctuation\">,</span>\n        firstList<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\tsecondList<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>firstList<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>secondList<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>firstList<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> j <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>secondList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            low <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>firstList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> secondList<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            high <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>firstList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> secondList<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> firstList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> secondList<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(m + n)</code>, as only a single loop with two pointers in\ntwo lists.</li>\n<li>Space Complexity: <code>O(n)</code>, as the answer for this problem is a list\nwith size limited by input, <code>n</code>.</li>\n</ul>","frontmatter":{"id":986,"title":"Interval List Intersections","url":"https://leetcode.com/problems/interval-list-intersections/description/","tags":["two-pointers"],"difficulty":"Medium","acceptance":"68.2%"}}},"pageContext":{"id":986}},"staticQueryHashes":["3111183354"]}