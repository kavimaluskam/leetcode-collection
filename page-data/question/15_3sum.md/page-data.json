{"componentChunkName":"component---src-templates-question-js","path":"/question/15_3sum.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = []\n<strong>Output:</strong> []\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n<h2>Discussion</h2>\n<p>An extended version of <a href=\"./1_two-sum.md\">1. Two Sum</a>.\nBased on our result in Two Sum, we have a result of <code>O(n)</code> solution with\ntwo integer in the input, we can target a solution for this problem\nof <code>O(n^2)</code>.</p>\n<p>If we simply enhanced the solution based on Two Sum, we have to figure out the\nde-duplication step. And as the solution should be of <code>O(n^2)</code>, we can try\nto sort the input array first.</p>\n<p>And based on this, we can try to use a pointer approach to scan all the\nelements within each iteration.</p>\n<h3>Solution</h3>\n<p>Our solution begins with sorting the input list, then a loop iterating along\nthe input list.</p>\n<p>In each iteration, we will use a 2-pointer approach to scan all the pairs\nof elements.</p>\n<p>As duplicate elements may appears and we want to avoid same combination,\nwe will try to skip the first elements by skipping the element same with\nthe previous one.</p>\n<p>We will define the two pointers as the beginning and the end of the remaining\nsub list. Similarly we will update the first element if it's same as\nthe previous one.</p>\n<p>Then we simply evaluate the same of the three elements. If it is positive we\nwill try to reduce it's value, then we update the last element with a smaller\nindex, vice versa for negative value.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">threeSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        nums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> left <span class=\"token operator\">></span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    <span class=\"token keyword\">continue</span>\n\n                value <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span>\n\n                <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    right <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\n                <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    right <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n^2)</code>, as a double loop is implemented.</li>\n<li>Space Complexity: <code>O(1)</code>, as only constant value is saved in memory.</li>\n</ul>","frontmatter":{"id":15,"title":"3Sum","url":"https://leetcode.com/problems/3sum/description/","tags":["array","two-pointers"],"difficulty":"Medium","acceptance":"27.9%"}}},"pageContext":{"id":15}},"staticQueryHashes":["3111183354"]}