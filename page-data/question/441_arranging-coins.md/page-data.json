{"componentChunkName":"component---src-templates-question-js","path":"/question/441_arranging-coins.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>You have a total of <i>n</i> coins that you want to form in a staircase shape, where every <i>k</i>-th row must have exactly <i>k</i> coins.</p>\n \n<p>Given <i>n</i>, find the total number of <b>full</b> staircase rows that can be formed.</p>\n<p><i>n</i> is a non-negative integer and fits within the range of a 32-bit signed integer.</p>\n<p><b>Example 1:</b>\n<pre>\nn = 5\n<p>The coins can form the following rows:\n¤\n¤ ¤\n¤ ¤</p>\n<p>Because the 3rd row is incomplete, we return 2.</p>\n</pre>\n</p>\n<p><b>Example 2:</b>\n<pre>\nn = 8\n<p>The coins can form the following rows:\n¤\n¤ ¤\n¤ ¤ ¤\n¤ ¤</p>\n<p>Because the 4th row is incomplete, we return 3.</p>\n</pre>\n</p>\n<h2>Discussion</h2>\n<p>First of all, let's reformulate the problem into mathematical format:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">given a positive integer `n`, determine the largest integer `k` such that:\n\nk (k + 1) / 2 &lt;= n</code></pre></div>\n<p>Intuitively, we have <code>k</code> smaller than <code>n</code>, searching for the largest\n<code>k</code>, binary search would be our good old friend.</p>\n<h3>Solution</h3>\n<p>Our solution starts with a basic binary search setup, with the evaluation\nof the above formula.</p>\n<p>Note that to prevent infinity loop issue, we limit our searching range by an\nextra 1 in every iteration.</p>\n<p>And for the last case, we return <code>tail</code> instead of <code>head</code> as <code>tail</code> &#x3C;= <code>head</code>\nafter breaking the loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">arrangeCoins</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        head <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        tail <span class=\"token operator\">=</span> n\n\n        <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;=</span> tail<span class=\"token punctuation\">:</span>\n            ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">+</span> head<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            temp <span class=\"token operator\">=</span> ptr <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n\n            <span class=\"token keyword\">if</span> temp <span class=\"token operator\">==</span> n<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> ptr\n\n            <span class=\"token keyword\">elif</span> temp <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">:</span>\n                head <span class=\"token operator\">=</span> ptr <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">elif</span> temp <span class=\"token operator\">></span> n<span class=\"token punctuation\">:</span>\n                tail <span class=\"token operator\">=</span> ptr <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> tail</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(log(n))</code>, for binary search algorithm.</li>\n<li>Space Complexity: <code>O(1)</code>, as no special data is cached in memory.</li>\n</ul>","frontmatter":{"id":441,"title":"Arranging Coins","url":"https://leetcode.com/problems/arranging-coins/description/","tags":["math","binary-search"],"difficulty":"Easy","acceptance":"42.1%"}}},"pageContext":{"id":441}},"staticQueryHashes":["72776548"]}