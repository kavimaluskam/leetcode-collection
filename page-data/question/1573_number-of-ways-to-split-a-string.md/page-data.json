{"componentChunkName":"component---src-templates-question-js","path":"/question/1573_number-of-ways-to-split-a-string.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given a binary string <code>s</code> (a string consisting only of &#39;0&#39;s and &#39;1&#39;s),&nbsp;we can split <code>s</code>&nbsp;into 3 <strong>non-empty</strong> strings s1, s2, s3 (s1+ s2+ s3 = s).</p>\n<p>Return the number of ways <code>s</code> can be split such that the number of&nbsp;characters &#39;1&#39; is the same in s1, s2, and s3.</p>\n<p>Since the answer&nbsp;may be too large,&nbsp;return it modulo&nbsp;10^9 + 7.</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;10101&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are four ways to split s in 3 parts where each part contain the same number of letters &#39;1&#39;.\n&quot;1|010|1&quot;\n&quot;1|01|01&quot;\n&quot;10|10|1&quot;\n&quot;10|1|01&quot;\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;1001&quot;\n<strong>Output:</strong> 0\n</pre>\n<p><strong>Example 3:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;0000&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three ways to split s in 3 parts.\n&quot;0|0|00&quot;\n&quot;0|00|0&quot;\n&quot;00|0|0&quot;\n</pre>\n<p><strong>Example 4:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;100100010100110&quot;\n<strong>Output:</strong> 12\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 10^5</code></li>\n\t<li><code>s[i]</code> is <code>&#39;0&#39;</code>&nbsp;or&nbsp;<code>&#39;1&#39;</code>.</li>\n</ul>\n<h2>Discussion</h2>\n<p>The problem requires to find way of splitting a string with only <code>0</code>s and <code>1</code>s,\nwhere the string is split into three parts, and each part carrying equal\nnumbers of <code>1</code>s.</p>\n<p>First we can come up with a brutal force solution, wheres we calculate\nall combinations of splitting the string with two moving pointers.\nWheres should result in time complexity of <code>O(n ^ 2)</code>. But we shall be able\nto optimize the problem into <code>O(n)</code>.</p>\n<p>We can consider the cases of input string and observe of solving patterns.</p>\n<ol>\n<li>No. of <code>1</code>s is zero</li>\n<li>No. of <code>1</code>s is not divisible by 3</li>\n<li>No. of <code>1</code>s is divisible by 3</li>\n</ol>\n<p>For case 1, we can see all splitting way fulfills the requirements,\nso we return the numbers of way splitting the string into 3 parts,\nwhich equals to <code>(n - 1) * (n - 2) / 2</code> (Consider two pointer as\nsplitting position moving along all space between the characters).</p>\n<p>For case 2, we can straightly return 0 as there is no correct ways to split.</p>\n<p>For case 3, we can see the result equals to the combination of\n<em>way of splitting between the first and second group of <code>1</code>s</em> and\n<em>way of splitting between the second and third group of <code>1</code>s</em></p>\n<p>Hence, we can see that by saving all the index of <code>1</code>s in the string,\nwe can handle all the above three cases in a linear processing time.</p>\n<h3>Solution</h3>\n<p>Our solution begins with saving the index of <code>1</code>s in the string to a list.</p>\n<p>We then can further handle the three cases by counting the length of the list,\nwhich referring to the number of <code>1</code>s in the string.</p>\n<p>For case 1 and 2 the implementation is straight forward. For case 3,\nwe first evaluate the <em>chunk</em> size of the <code>1</code> group, then we can find the\nstarting and ending index of each <code>1</code> group. Hence the position of the <code>0</code>s\nbetween the <code>1</code>s groups are located.</p>\n<p>Finally we evaluate the mod when returning the value.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        index<span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span>\n                index<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n        count <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n        <span class=\"token keyword\">elif</span> count <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">=</span> count <span class=\"token operator\">//</span> <span class=\"token number\">3</span>\n\n            l <span class=\"token operator\">=</span> index<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> index<span class=\"token punctuation\">[</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            r <span class=\"token operator\">=</span> index<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> count<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> index<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            result <span class=\"token operator\">=</span> l <span class=\"token operator\">*</span> r\n\n        <span class=\"token keyword\">return</span> result <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token number\">9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, as one iteration on the input string is required.</li>\n<li>Space Complexity: <code>O(n)</code>, index of <code>1</code>s is saved in memory, which is limited\nby the input size.</li>\n</ul>","frontmatter":{"id":1573,"title":"Number of Ways to Split a String","url":"https://leetcode.com/problems/number-of-ways-to-split-a-string/description/","tags":["string"],"difficulty":"Medium","acceptance":"30.9%"}}},"pageContext":{"id":1573}},"staticQueryHashes":["3111183354"]}