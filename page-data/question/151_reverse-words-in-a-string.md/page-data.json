{"componentChunkName":"component---src-templates-question-js","path":"/question/151_reverse-words-in-a-string.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given an input string <code>s</code>, reverse the order of the <strong>words</strong>.</p>\n<p>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by at least one space.</p>\n<p>Return <em>a string of the words in reverse order concatenated by a single space.</em></p>\n<p><b>Note</b> that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;the sky is blue&quot;\n<strong>Output:</strong> &quot;blue is sky the&quot;\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;  hello world  &quot;\n<strong>Output:</strong> &quot;world hello&quot;\n<strong>Explanation:</strong> Your reversed string should not contain leading or trailing spaces.\n</pre>\n<p><strong>Example 3:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;a good   example&quot;\n<strong>Output:</strong> &quot;example good a&quot;\n<strong>Explanation:</strong> You need to reduce multiple spaces between two words to a single space in the reversed string.\n</pre>\n<p><strong>Example 4:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;  Bob    Loves  Alice   &quot;\n<strong>Output:</strong> &quot;Alice Loves Bob&quot;\n</pre>\n<p><strong>Example 5:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;Alice does not even like bob&quot;\n<strong>Output:</strong> &quot;bob like even not does Alice&quot;\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There is <strong>at least one</strong> word in <code>s</code>.</li>\n</ul>\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n<ul>\n\t<li>Could you solve it <strong>in-place</strong> with <code>O(1)</code> extra space?</li>\n</ul>\n<p>&nbsp;</p>\n<h2>Discussion</h2>\n<p>The problem requires us to reverse the words in a sentence string.\nSo we think of breaking down the string into words list,\nand perform reverse with two pointers.</p>\n<p>Interesting that <a href=\"https://leetcode.com/problems/reverse-words-in-a-string/discuss/737801/Python-Simple-O(N)-solution-with-simple-case-checking\">one solution in leetcode</a>\nmentioned <code>string.split()</code> in python can remove all space, hence giving a\nmore elegant solution.</p>\n<h3>Solution</h3>\n<p>We first break down the sentence into list of word by splitting,\nthen we have two pointers from the beginning and end, iterating till they meet.</p>\n<p>In each iteration, we check if any space is scanned and we will skip it,\nthen we interchange the values at the two pointers, and update the two pointers\nafter complete.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseWords</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        sl <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\n        head <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        tail <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sl<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;=</span> tail<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> sl<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n                sl<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span>\n                tail <span class=\"token operator\">-=</span><span class=\"token number\">1</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token keyword\">if</span> sl<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n                sl<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">)</span>\n                tail <span class=\"token operator\">-=</span><span class=\"token number\">1</span>\n                <span class=\"token keyword\">continue</span>\n\n            sl<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sl<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sl<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span>\n            head <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            tail <span class=\"token operator\">-=</span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">continue</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>sl<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, scanning the string into words,\nand perform reverse with  two pointers along the array.</li>\n<li>Space Complexity: <code>O(n)</code>, as we have to put the word array in memory.</li>\n</ul>","frontmatter":{"id":151,"title":"Reverse Words in a String","url":"https://leetcode.com/problems/reverse-words-in-a-string/description/","tags":["string"],"difficulty":"Medium","acceptance":"22.5%"}}},"pageContext":{"id":151}},"staticQueryHashes":["3111183354"]}