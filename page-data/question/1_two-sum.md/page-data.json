{"componentChunkName":"component---src-templates-question-js","path":"/question/1_two-sum.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n<p>You can return the answer in any order.</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Output:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n<p><strong>Example 3:</strong></p>\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n<h2>Discussion</h2>\n<h3>Trial 1</h3>\n<p>One can easily see a trivial solution with brutal force. We loop through each\nelement <code>x</code> in the list, and loop through each element again to check of\n<code>target - x</code>. Yet this is a very slow solution giving time complexity <code>O(n^2)</code>.</p>\n<h3>Trial 2</h3>\n<p>Based on <em>Trial 1</em>, we can enhance the solution by preparing a hash map\n(<code>dict</code> in python). Hence we loop through each element <code>x</code> in the list, and\ncheck for element <code>target - x</code> in the hash map. As look up in hash map is\natomic, the time complexity of the algorithm improved to <code>O(n)</code>. While the hash\nmap takes space of <code>O(n)</code>. We sacrifice memory for algorithm performance.</p>\n<h3>Solution</h3>\n<p>Further improving <em>trail 2</em>, we can preparing the hash map while looping\nthrough each element in the list. For cases where no correct pair is found,\nwe add the new element to the hash map as: <code>{element: index}</code> in each iteration.</p>\n<p>Although the time complexity and space complexity remains unchanged, but for\nnormal cases, the correct pair is found before looping through every element,\nso the actual iteration and size of map is smaller than <code>n</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            diff <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> diff <span class=\"token keyword\">in</span> cache <span class=\"token keyword\">and</span> cache<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> i<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                cache<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> i\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, as only one looping of the input list is required.</li>\n<li>Space Complexity: <code>O(n)</code>, as a hash map of the elements in input array is\ncreated.</li>\n</ul>","frontmatter":{"id":1,"title":"Two Sum","url":"https://leetcode.com/problems/two-sum/description/","tags":["array","hash-table"],"difficulty":"Easy","acceptance":"45.9%"}}},"pageContext":{"id":1}},"staticQueryHashes":["72776548"]}