{"componentChunkName":"component---src-templates-question-js","path":"/question/74_search-a-2d-matrix.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Write an efficient algorithm that searches for a value in an <code>m x n</code> matrix. This matrix has the following properties:</p>\n<ul>\n\t<li>Integers in each row are sorted from left to right.</li>\n\t<li>The first integer of each row is greater than the last integer of the previous row.</li>\n</ul>\n<p>&#xA0;</p>\n<p><strong>Example 1:</strong></p>\n<img alt src=\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\" style=\"width: 322px; height: 242px;\">\n<pre><strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 3\n<strong>Output:</strong> true\n</pre>\n<p><strong>Example 2:</strong></p>\n<img alt src=\"https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg\" style=\"width: 322px; height: 242px;\">\n<pre><strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 13\n<strong>Output:</strong> false\n</pre>\n<p><strong>Example 3:</strong></p>\n<pre>\n<strong>Input:</strong> matrix = [], target = 0\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>0 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li>\n</ul>\n<h2>Discussion</h2>\n<p>It's trivial that this problem is modified from the classic\nbinary search problem, with input list becoming 2D-array.</p>\n<p>We can imagine the 2D-array to be flatten as an normal array, then the problem\nis simplified as a binary search problem. Handling the search criteria and\nevaluation from the 2D-array input and it's done.</p>\n<h3>Solution</h3>\n<p>Our problem begins with a classic binary search setup. As the input become\n2D-array, we set the <code>tail</code> to be <code>size_i * size_j - 1</code>.</p>\n<p>And in each evaluation, we have to project the temporary value <code>mid</code> back to\nindex of the 2D-array as <code>mid // size_j</code> and <code>mid % size_j</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">searchMatrix</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        size_i<span class=\"token punctuation\">,</span> size_j <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        head<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size_i <span class=\"token operator\">*</span> size_j <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n            i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">//</span> size_j<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">%</span> size_j\n\n            value <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span>\n                tail <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span>\n                head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> matrix<span class=\"token punctuation\">[</span>head  <span class=\"token operator\">//</span> size_j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>head <span class=\"token operator\">%</span> size_j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(log(n))</code>, as for a binary search algorithm,\nwheres <code>n</code> indicates numbers of elements in the 2D-array here.</li>\n<li>Space Complexity: <code>O(1)</code>, as only constant variable is involved.</li>\n</ul>","frontmatter":{"id":74,"title":"Search a 2D Matrix","url":"https://leetcode.com/problems/search-a-2d-matrix/description/","tags":["array","binary-search"],"difficulty":"Medium","acceptance":"37.0%"}}},"pageContext":{"id":74}},"staticQueryHashes":["3111183354"]}