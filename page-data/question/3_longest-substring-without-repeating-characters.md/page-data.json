{"componentChunkName":"component---src-templates-question-js","path":"/question/3_longest-substring-without-repeating-characters.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given a string <code>s</code>, find the length of the <b>longest substring</b> without repeating characters.</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;abcabcbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;abc&quot;, with the length of 3.\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;bbbbb&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The answer is &quot;b&quot;, with the length of 1.\n</pre>\n<p><strong>Example 3:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;pwwkew&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</pre>\n<p><strong>Example 4:</strong></p>\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>\n</ul>\n<h2>Discussion</h2>\n<h3>Trial 1</h3>\n<p><em>Trial 1</em> gives a rather naive approach.\nWe loop through characters in input string to search for the longest substring,\nand we use a hash map to save the characters for duplicate character detection.</p>\n<p>When duplicate character is found we have to remove the character in hashmap\nuntil the duplicated character is removed. We have to first locate all the keys\nin the hash map and scan for the first one for each removal. Which is performing\nbadly.</p>\n<p>Thus this algorithm gives time complexity <code>O(n^2)</code> and space complexity <code>O(n)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">while</span> i <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">del</span> cache<span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n            cache<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Trial 2</h3>\n<p><em>Trial 2</em> improves <em>Trial 1</em> with a starting pointer.\nAgain we loop through characters in input string to search fir the\nlongest substring, with a hash map saving the characters.\nBesides we have a starting pointer to track the start of the substring,\n(we can also interpret this approach as <code>Sliding Window</code>).</p>\n<p>Ths benefit is that we no longer have to track the length of the substring\nby the dict itself.</p>\n<p>This algorithm improves time complexity to <code>O(2n) = O(n)</code>\nand space complexity remains <code>O(n)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        start_ptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">del</span> cache<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>start_ptr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n                start_ptr <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                cache<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                result <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> start_ptr<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<h3>Solution</h3>\n<p><em>The final solution</em> further improves <em>Trial 2</em> by saving\nthe position of the character in the hash map. So when duplicated character is\nfound, no removal in the hash map takes place. Instead we move the starting\npointer to the position right after the duplicated character's latest position.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> char <span class=\"token keyword\">in</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> start_ptr<span class=\"token punctuation\">:</span>\n        start_ptr <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>Such operation is <code>O(1)</code> compared to <code>O(n)</code> in the above two approaches.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        start_ptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            char <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> char <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> cache<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> start_ptr<span class=\"token punctuation\">:</span>\n                    start_ptr <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n            result <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> start_ptr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            cache<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, as through the looping in the input string,\nonly atomic pointer update takes place when duplicated character is found.</li>\n<li>Space Complexity: <code>O(n)</code>, as we only maintain the hash map with each\ncharacters' value and position</li>\n</ul>","frontmatter":{"id":3,"title":"Longest Substring Without Repeating Characters","url":"https://leetcode.com/problems/longest-substring-without-repeating-characters/description/","tags":["hash-table","two-pointers","string","sliding-window"],"difficulty":"Medium","acceptance":"30.7%"}}},"pageContext":{"id":3}},"staticQueryHashes":["72776548"]}