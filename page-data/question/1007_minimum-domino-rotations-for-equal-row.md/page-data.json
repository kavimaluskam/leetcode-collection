{"componentChunkName":"component---src-templates-question-js","path":"/question/1007_minimum-domino-rotations-for-equal-row.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>In a row of dominoes, <code>A[i]</code> and <code>B[i]</code> represent the top and bottom halves of the <code>i<sup>th</sup></code> domino.&nbsp; (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)</p>\n<p>We may rotate the <code>i<sup>th</sup></code> domino, so that <code>A[i]</code> and <code>B[i]</code> swap values.</p>\n<p>Return the minimum number of rotations so that all the values in <code>A</code> are the same, or all the values in <code>B</code>&nbsp;are the same.</p>\n<p>If it cannot be done, return <code>-1</code>.</p>\n<p>&#xA0;</p>\n<p><strong>Example 1:</strong></p>\n<img alt src=\"https://assets.leetcode.com/uploads/2019/03/08/domino.png\" style=\"height: 161px; width: 200px;\">\n<pre><strong>Input:</strong> A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nThe first figure represents the dominoes as given by A and B: before we do any rotations.\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> A = [3,5,1,2,3], B = [3,6,3,3,4]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nIn this case, it is not possible to rotate the dominoes to make one row of values equal.\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>2 &lt;= A.length == B.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= A[i], B[i] &lt;= 6</code></li>\n</ul>\n<h2>Discussion</h2>\n<p>Nothing special for this problem. Given two list of dominos of a sized-6-enum,\nwe can easily setup counters for them and perform comparison. We can easily\nimagine that the solution would be linear.</p>\n<h3>Solution</h3>\n<p>Our solution begins with construction of two counters based on the input lists.</p>\n<p>Then we can find the most frequent elements among them and decide what list\nis the dominant one. Afterwards we locate the most frequent element in the\ndominant list, and perform linear operation on both list.</p>\n<p>As long as elements need to be flipped exists, we compare the same index in\nanother list. We then accumulate the number of elements needed to be flipped\nor return <code>-1</code> indicating impossibility of dominoes rotation.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minDominoRotations</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        counter_a <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        counter_b <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span>\n\n        max_a<span class=\"token punctuation\">,</span> max_b <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>counter_a<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>counter_a<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>counter_b<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>counter_b<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> counter_a<span class=\"token punctuation\">[</span>max_a<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> counter_b<span class=\"token punctuation\">[</span>max_b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            val<span class=\"token punctuation\">,</span> main<span class=\"token punctuation\">,</span> aux <span class=\"token operator\">=</span> max_a<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">,</span> B\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            val<span class=\"token punctuation\">,</span> main<span class=\"token punctuation\">,</span> aux <span class=\"token operator\">=</span> max_b<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> A\n\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> main<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> val<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token keyword\">if</span> main<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> val <span class=\"token keyword\">and</span> aux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> val<span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">if</span> main<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> val <span class=\"token keyword\">and</span> aux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> val<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(n)</code>, as all operations are linear.</li>\n<li>Space Complexity: <code>O(1)</code>, as domino is a sized-6-enum, our counter cache is\nonly <code>O(6) == O(1)</code>.</li>\n</ul>","frontmatter":{"id":1007,"title":"Minimum Domino Rotations For Equal Row","url":"https://leetcode.com/problems/minimum-domino-rotations-for-equal-row/description/","tags":["array","greedy"],"difficulty":"Medium","acceptance":"50.8%"}}},"pageContext":{"id":1007}},"staticQueryHashes":["72776548"]}