{"componentChunkName":"component---src-templates-question-js","path":"/question/67_add-binary.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given two binary strings, return their sum (also a binary string).</p>\n<p>The input strings are both <strong>non-empty</strong> and contains only characters <code>1</code> or&nbsp;<code>0</code>.</p>\n<p><strong>Example 1:</strong></p>\n<pre>\n<strong>Input:</strong> a = &quot;11&quot;, b = &quot;1&quot;\n<strong>Output:</strong> &quot;100&quot;</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> a = &quot;1010&quot;, b = &quot;1011&quot;\n<strong>Output:</strong> &quot;10101&quot;</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li>Each string consists only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li>\n\t<li>Each string is either <code>&quot;0&quot;</code> or doesn&#39;t contain any leading zero.</li>\n</ul>\n<h2>Discussion</h2>\n<p>A problem very similar to <a href=\"./2_add-two-numbers.md\">2. Add Two Numbers</a>:\nMathematical addition for binary numbers in string. As the input date is\nin binary string format, i try to keep the data type and handle the addition\nby conditional cases.</p>\n<h3>Solution</h3>\n<p>Similar to <a href=\"./2_add-two-numbers.md\">2. Add Two Numbers</a>, we have to handle:</p>\n<ol>\n<li>When two numbers have different numbers of significant figures,</li>\n<li>When carry digits exist in the addition,</li>\n<li>When the most significant figures of the sum is carry.</li>\n</ol>\n<p>Solving <code>1</code>, when there is 1 binary string running out of characters during\naddition, we proceed the addition with the missing digits replaced by <code>\"0\"</code>.</p>\n<p>Handling the addition, we view it as string conditional cases:</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>string A</th>\n<th>string B</th>\n<th>carry</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>10</td>\n</tr>\n<tr>\n<td>5</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>10</td>\n</tr>\n<tr>\n<td>7</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>10</td>\n</tr>\n<tr>\n<td>8</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>11</td>\n</tr>\n</tbody>\n</table>\n<p>Hence we can conclude:</p>\n<ol>\n<li>When string A equals string B (case <code>1</code> - <code>2</code>, <code>7</code> - <code>8</code>), we can see the\nresult digit equals to carry, while the result digit's equals string A\nand string B's value,</li>\n<li>When string A does not equals string B (case <code>3</code> - <code>6</code>), we can see the\nresult dominated by carry. When carry is <code>\"0\"</code>, result becomes <code>\"1\"</code>;\nwhen carry is <code>\"1\"</code>, result becomes <code>\"10\"</code>.</li>\n</ol>\n<p>Hence we apply this logic in the additional handling. And after the handling of\n<code>2</code> and <code>3</code>, the solution completes.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">addBinary</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n        is_carry_exist <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n        size_a<span class=\"token punctuation\">,</span> size_b <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>size_a<span class=\"token punctuation\">,</span> size_b<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            val_a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>size_a <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> size_a <span class=\"token operator\">></span> i <span class=\"token keyword\">else</span> <span class=\"token string\">'0'</span>\n            val_b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>size_b <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> size_b <span class=\"token operator\">></span> i <span class=\"token keyword\">else</span> <span class=\"token string\">'0'</span>\n\n            <span class=\"token keyword\">if</span> val_a <span class=\"token operator\">==</span> val_b<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> is_carry_exist<span class=\"token punctuation\">:</span>\n                    result <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span> <span class=\"token operator\">+</span> result\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    result <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> result\n\n                is_carry_exist <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>val_a <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span> <span class=\"token keyword\">and</span> val_b <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> val_a <span class=\"token operator\">!=</span> val_b<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> is_carry_exist<span class=\"token punctuation\">:</span>\n                    result <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> result\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    result <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span> <span class=\"token operator\">+</span> result\n\n        <span class=\"token keyword\">if</span> is_carry_exist<span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span> <span class=\"token operator\">+</span> result\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(max(m, n))</code>, wheres <code>m</code> and <code>n</code> are the size of the two\ninput binary string. As only one looping through the larger binary string is\nrequired.</li>\n<li>Space Complexity: <code>O(max(m, n))</code>, as the result binary string's size is\ndetermined by the larger input binary string.</li>\n</ul>","frontmatter":{"id":67,"title":"Add Binary","url":"https://leetcode.com/problems/add-binary/description/","tags":["math","string"],"difficulty":"Easy","acceptance":"45.9%"}}},"pageContext":{"id":67}},"staticQueryHashes":["3111183354"]}