{"componentChunkName":"component---src-templates-question-js","path":"/question/50_powx-n.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(<em>x</em>, <em>n</em>)</a>, which calculates&nbsp;<em>x</em> raised to the power <em>n</em> (i.e. x<sup><span style=\"font-size:10.8333px\">n</span></sup>).</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre>\n<strong>Input:</strong> x = 2.00000, n = 10\n<strong>Output:</strong> 1024.00000\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> x = 2.10000, n = 3\n<strong>Output:</strong> 9.26100\n</pre>\n<p><strong>Example 3:</strong></p>\n<pre>\n<strong>Input:</strong> x = 2.00000, n = -2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>-100.0 &lt;&nbsp;x&nbsp;&lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= n &lt;=&nbsp;2<sup>31</sup>-1</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>\n</ul>\n<h2>Discussion</h2>\n<p>This problem requires numerous (<code>n</code>) but identical operations (multiplication),\nwhich is a good set up of <em>reduce and base</em> algorithms. That is, we can easily\nreduce the data size in each iteration, and end up solve the problem by\nrecursion. It's a type of questions like <em>binary search</em>.</p>\n<h3>Solution</h3>\n<p>We try to reduce the size of <code>n</code> by half in each iteration. For case\nwhere n is odd, we minus 1 from <code>n</code> and perform multiplication directly.</p>\n<p>Moreover we have to handle the root case (<code>n == 0</code>) and negative <code>n</code>, as stated\nin the problem.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">myPow</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>myPow<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            t <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>myPow<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> t <span class=\"token operator\">*</span> t\n\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            t <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>myPow<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> x</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(log(n))</code>, as the algorithm involves log_2(n)\niterations, which is similar to binary search.</li>\n<li>Space Complexity: <code>O(log(n))</code>, as the algorithm is recursive and involves\nlog<em>2(n) iterations, the root execution would hold maximum log</em>2(n) instance.</li>\n</ul>","frontmatter":{"id":50,"title":"Pow(x, n)","url":"https://leetcode.com/problems/powx-n/description/","tags":["math","binary-search"],"difficulty":"Medium","acceptance":"30.5%"}}},"pageContext":{"id":50}},"staticQueryHashes":["72776548"]}