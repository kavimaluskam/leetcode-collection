{"componentChunkName":"component---src-templates-question-js","path":"/question/852_peak-index-in-a-mountain-array.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Let&#39;s call an array <code>arr</code> a <strong>mountain</strong>&nbsp;if the following properties hold:</p>\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some <code>i</code> with&nbsp;<code>0 &lt; i&nbsp;&lt; arr.length - 1</code>&nbsp;such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... arr[i-1] &lt; arr[i] </code></li>\n\t\t<li><code>arr[i] &gt; arr[i+1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n<p>Given an integer array arr that is <strong>guaranteed</strong> to be&nbsp;a mountain, return any&nbsp;<code>i</code>&nbsp;such that&nbsp;<code>arr[0] &lt; arr[1] &lt; ... arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code>.</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> arr = [0,1,0]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> arr = [0,2,1,0]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> arr = [0,10,5,2]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> arr = [3,4,5,1]\n<strong>Output:</strong> 2\n</pre><p><strong>Example 5:</strong></p>\n<pre><strong>Input:</strong> arr = [24,69,100,99,79,78,67,36,26,19]\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>arr</code> is <strong>guaranteed</strong> to be a mountain array.</li>\n</ul>\n<h2>Discussion</h2>\n<p>The problem setup is a very typical binary search problem.\nInstead of simply iterate the input and find the peak value,\nwe aim to perform better with binary search approach.</p>\n<p>With a common binary search setup, we compare the <code>mid</code> value in\neach iteration. If the <code>mid</code> value is in <em>rising-side</em>, we search\nin the later part of the array, else search in the beginning part.</p>\n<h3>Solution</h3>\n<p>We begin with a common binary search setup: initializing <code>head</code> and <code>tail</code>,\nand try to evaluate and the median value, and update the search area in each\niteration, until <code>head</code> and <code>tail</code> come across each other.</p>\n<p>When <code>mid</code> is smaller than the next value, it's clear in the <em>rising-side</em>, and\nwe search in the later part of the array. Else, we search in the beginning part\nof the array.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">peakIndexInMountainArray</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        head<span class=\"token punctuation\">,</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tail <span class=\"token operator\">=</span> mid\n\n        <span class=\"token keyword\">return</span> head</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(log(n))</code>, for simple binary search problem.</li>\n<li>Space Complexity: <code>O(1)</code>, as only 3 variables are cached in memory.</li>\n</ul>","frontmatter":{"id":852,"title":"Peak Index in a Mountain Array","url":"https://leetcode.com/problems/peak-index-in-a-mountain-array/description/","tags":["binary-search"],"difficulty":"Easy","acceptance":"71.8%"}}},"pageContext":{"id":852}},"staticQueryHashes":["3111183354"]}