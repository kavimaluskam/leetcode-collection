{"componentChunkName":"component---src-templates-question-js","path":"/question/2_add-two-numbers.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The digits are stored in <b>reverse order</b>, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p>&#xA0;</p>\n<p><strong>Example 1:</strong></p>\n<img alt src=\"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\" style=\"width: 483px; height: 342px;\">\n<pre><strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [7,0,8]\n<strong>Explanation:</strong> 342 + 465 = 807.\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>\n<strong>Input:</strong> l1 = [0], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n<p><strong>Example 3:</strong></p>\n<pre>\n<strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n<strong>Output:</strong> [8,9,9,9,0,0,0,1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n<h2>Discussion</h2>\n<p>The main logic of this algorithm is simple: Mathematical addition\ndigit by digit, with digits in linked lists.\nYet there are tricky points to be handled:</p>\n<ol>\n<li>When two numbers have different numbers of significant figures,</li>\n<li>When carry digits exist in the addition, and</li>\n<li>When the most significant figures of the sum is carry.</li>\n</ol>\n<h3>Solution</h3>\n<p>Solving <code>1</code>, when there is 1 linked list running out of nodes during\naddition, we proceed the addition with the missing digits replaced by 0.</p>\n<p>Solving <code>2</code>, we cache any carry digit in each iteration, and pass the digit\nto the next digital addition. The remainder of the digital sum is saved\nin the result linked list. Thus every iteration perform addition as:\n<code>carry(0/1) + value_1 + value_2</code></p>\n<p>Solving <code>3</code>, we perform similar addition in <code>1</code>, check and handle <code>2</code> after the\nlast iteration.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        node <span class=\"token operator\">=</span> result\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token keyword\">and</span> l1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token keyword\">and</span> l2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            s <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val\n\n            <span class=\"token keyword\">if</span> l1<span class=\"token punctuation\">:</span>\n                s <span class=\"token operator\">+=</span> l1<span class=\"token punctuation\">.</span>val\n            <span class=\"token keyword\">if</span> l2<span class=\"token punctuation\">:</span>\n                s <span class=\"token operator\">+=</span> l2<span class=\"token punctuation\">.</span>val\n\n            node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> s <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>s<span class=\"token operator\">//</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n            l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">or</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">or</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n        <span class=\"token keyword\">if</span> l1<span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> l1<span class=\"token punctuation\">.</span>val\n\n        <span class=\"token keyword\">if</span> l2<span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> l2<span class=\"token punctuation\">.</span>val\n\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> result</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(max(m, n))</code>, wheres <code>m</code> and <code>n</code> are the size of the two\ninput list. As only one looping through the larger input linked list is\nrequired.</li>\n<li>Space Complexity: <code>O(max(m, n))</code>, as the result linked list's size is\ndetermined by the larger input linked list.</li>\n</ul>","frontmatter":{"id":2,"title":"Add Two Numbers","url":"https://leetcode.com/problems/add-two-numbers/description/","tags":["linked-list","math"],"difficulty":"Medium","acceptance":"34.3%"}}},"pageContext":{"id":2}},"staticQueryHashes":["72776548"]}