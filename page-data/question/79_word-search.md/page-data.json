{"componentChunkName":"component---src-templates-question-js","path":"/question/79_word-search.md","result":{"data":{"site":{"siteMetadata":{"title":"Leetcode Collection"}},"markdownRemark":{"html":"<h2>Problem</h2>\n<p>Given a 2D board and a word, find if the word exists in the grid.</p>\n<p>The word can be constructed from letters of sequentially adjacent cell, where &quot;adjacent&quot; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>\n<p><strong>Example:</strong></p>\n<pre>\nboard =\n[\n  [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;],\n  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],\n  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]\n]\n\nGiven word = &quot;<strong>ABCCED</strong>&quot;, return <strong>true</strong>.\nGiven word = &quot;<strong>SEE</strong>&quot;, return <strong>true</strong>.\nGiven word = &quot;<strong>ABCB</strong>&quot;, return <strong>false</strong>.\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n\t<li><code>board</code>&nbsp;and <code>word</code> consists only of lowercase and uppercase English letters.</li>\n\t<li><code>1 &lt;= board.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= board[i].length &lt;= 200</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 10^3</code></li>\n</ul>\n<h2>Discussion</h2>\n<p>The problem ask for an algorithm searching for all possible paths in the grid,\nsuch that the path matched the input word characters by characters in order.</p>\n<p>It should not be difficult to come up with dfs or searching algorithms.\nSpecial point of this problem involves:</p>\n<ol>\n<li>searching in this problem iterative with a factor of 4,</li>\n<li>searching of the same element in the input grid more than once is not allowed\n(which is very reasonable).</li>\n</ol>\n<p>As explained in below: we start with a rather straight forward algorithm and\nsee if any enhancement can be made.</p>\n<h3>Trial 1</h3>\n<p><em>Trial 1</em> gives a straight forward and naive solution.\nWe try to scan through the elements in the input grid. And for each element,\nwe search it with characters in the input word.</p>\n<p>For matching case, we extend the search to the neighbor elements\nin the input grid, and the next characters in the input word. The search ends\neither when: 1) every characters in the word is matched, 2) any characters\nin the word is not found in neighbors of the current elements, or 3) we find\nsame element in the grid is being used multiple times.</p>\n<p>To check if same letter being used multiple times, we cached used\nletters during the search. The cache is cleaned when search ends.</p>\n<p>We terminate the algorithm and return result if 1) is achieved. For 2) or 3), we\nterminate the search and start searching with the next element in the input\ngrid.</p>\n<p>This trail give a time complexity of <code>O(n * 4^l)</code>, wheres <code>n</code> is the size of\ninput grid, and <code>l</code> is the size of the input word. As the worst case consists of\nsearching for all elements in the grid, with each search continues with all\npossible elements, which is <code>4 ^ l</code>.</p>\n<p>Space complexity for this trial is <code>O(max(l^2, n))</code>.\nAs recursion and caching of visited elements in the grid is involved.\nFor the worst case, recursion holding up for each characters in the input word,\nand each recursion caches visited element with size at most <code>l</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>len_y<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>len_x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>len_w <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>word <span class=\"token operator\">=</span> board<span class=\"token punctuation\">,</span> word\n\n        y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">while</span> y <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>len_y <span class=\"token keyword\">and</span> x <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>len_x<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n            <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>len_x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> x <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>len_x<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token keyword\">if</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> y <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>len_y<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> self<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token keyword\">if</span> w <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>len_w <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cache <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \\\n            <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cache <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \\\n            <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cache <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \\\n            <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cache <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Solution</h3>\n<p><em>The final solution</em> improves <em>Trial 1</em> by removing the\ncaching of visited elements. Instead we make use of the input grid.\nAs grid becomes a stateful variable with respect to the searching, we mark the\nsearched element in the input grid with some special character like <code>@</code> or <code>''</code>.\nAnd we reset it with the original value once searching is completed.</p>\n<p>Hence we don't have to handle the cache with extra space, while the memory\nof the input grid is always necessary.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>len_y<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>len_x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>len_w <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>word <span class=\"token operator\">=</span> board<span class=\"token punctuation\">,</span> word\n\n        y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">while</span> y <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>len_y <span class=\"token keyword\">and</span> x <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>len_x<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n            <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>len_x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> x <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>len_x<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token keyword\">if</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> y <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>len_y<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> self<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token keyword\">if</span> w <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>len_w <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n        cache<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span>\n\n        res <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \\\n            <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \\\n            <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \\\n            <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> w <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cache\n\n        <span class=\"token keyword\">return</span> res</code></pre></div>\n<h3>Complexity Analysis</h3>\n<ul>\n<li>Time Complexity: <code>O(3^n)</code>, as similar to <a href=\"./submission_v0.py3\">Trial 1</a>,\nthe worst case consists of searching for all elements in the grid,\nwith each search continues with all possible elements, which is <code>4 ^ l</code>.</li>\n<li>Space Complexity: <code>O(n)</code>, as we only maintain the input grid in memory.\nWhile recursion can happens with level at most <code>l</code>,\nwe have <code>l</code> smaller than <code>n</code>. Otherwise the result should always be false.</li>\n</ul>","frontmatter":{"id":79,"title":"Word Search","url":"https://leetcode.com/problems/word-search/description/","tags":["array","backtracking"],"difficulty":"Medium","acceptance":"36.0%"}}},"pageContext":{"id":79}},"staticQueryHashes":["72776548"]}